# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import cavedb.models
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bulletin',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bulletin_name', models.CharField(unique=True, max_length=80)),
                ('short_name', models.CharField(unique=True, max_length=80)),
                ('editors', models.CharField(max_length=255)),
                ('bw_front_cover_image', models.ImageField(null=True, upload_to=cavedb.models.CavedbBulletinUploadTo, blank=True)),
                ('color_front_cover_image', models.ImageField(null=True, upload_to=cavedb.models.CavedbBulletinUploadTo, blank=True)),
                ('back_cover_image', models.ImageField(null=True, upload_to=cavedb.models.CavedbBulletinUploadTo, blank=True)),
                ('title_page', models.TextField(null=True, blank=True)),
                ('preamble_page', models.TextField(null=True, blank=True)),
                ('contributor_page', models.TextField(null=True, blank=True)),
                ('toc_footer', models.TextField(null=True, blank=True)),
                ('caves_header', models.TextField(null=True, verbose_name=b'Introduction', blank=True)),
                ('photo_index_header', models.TextField(null=True, verbose_name=b'Entra Entries in List of Photos', blank=True)),
                ('indexed_terms', models.TextField(null=True, verbose_name=b'Indexed Terms', blank=True)),
                ('dvd_readme', models.TextField(null=True, verbose_name=b'DVD Readme File', blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
            ],
            options={
                'ordering': ('bulletin_name',),
            },
        ),
        migrations.CreateModel(
            name='BulletinAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('attachment', models.FileField(upload_to=cavedb.models.CavedbBulletinAttachmentUploadTo)),
                ('description', models.CharField(max_length=255)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin', models.ForeignKey(to='cavedb.Bulletin')),
            ],
            options={
                'ordering': ('bulletin', 'description'),
                'verbose_name': 'attachment',
            },
        ),
        migrations.CreateModel(
            name='BulletinChapter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('chapter_title', models.CharField(max_length=64)),
                ('is_appendix', models.BooleanField(default=False, verbose_name=b'Appendix')),
                ('sort_order', models.IntegerField()),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin', models.ForeignKey(to='cavedb.Bulletin')),
            ],
            options={
                'ordering': ('bulletin', 'sort_order'),
                'verbose_name': 'chapter',
            },
        ),
        migrations.CreateModel(
            name='BulletinGisLineplot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('attach_zip', models.FileField(upload_to=cavedb.models.CavedbBulletinGislineplotUploadTo, verbose_name=b'Lineplot ZIP File')),
                ('shp_filename', models.CharField(max_length=80, verbose_name=b'SHP File Name')),
                ('description', models.CharField(max_length=255, null=True, blank=True)),
                ('datum', models.CharField(max_length=64, verbose_name=b'Datum', choices=[(b'NAD27', b'NAD27'), (b'NAD83', b'NAD83'), (b'WGS84', b'WGS84')])),
                ('coord_sys', models.CharField(max_length=64, verbose_name=b'Coordinate System', choices=[(b'LATLON', b'Latitude/Longitude'), (b'UTM', b'UTM')])),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin', models.ForeignKey(to='cavedb.Bulletin')),
            ],
            options={
                'ordering': ('description',),
                'verbose_name': 'GIS lineplot',
            },
        ),
        migrations.CreateModel(
            name='BulletinRegion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region_name', models.CharField(max_length=64)),
                ('map_region_name', models.CharField(max_length=64, null=True, blank=True)),
                ('introduction', models.TextField(null=True, blank=True)),
                ('show_gis_map', models.BooleanField(default=True, verbose_name=b'Show GIS Map')),
                ('sort_order', models.IntegerField()),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin', models.ForeignKey(to='cavedb.Bulletin')),
            ],
            options={
                'ordering': ('bulletin', 'region_name'),
                'verbose_name': 'region',
            },
        ),
        migrations.CreateModel(
            name='BulletinSection',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('section_title', models.CharField(max_length=64, null=True, blank=True)),
                ('section_subtitle', models.CharField(max_length=64, null=True, blank=True)),
                ('sort_order', models.IntegerField()),
                ('num_columns', models.IntegerField()),
                ('section_data', models.TextField(null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin', models.ForeignKey(to='cavedb.Bulletin')),
                ('bulletin_chapter', cavedb.models.BulletinChoice(to='cavedb.BulletinChapter')),
            ],
            options={
                'ordering': ('bulletin_chapter', 'sort_order'),
                'verbose_name': 'section',
            },
        ),
        migrations.CreateModel(
            name='BulletinSectionReference',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('author', models.CharField(max_length=255, null=True, blank=True)),
                ('title', models.CharField(max_length=255, null=True, blank=True)),
                ('book', models.CharField(max_length=255, null=True, blank=True)),
                ('volume', models.CharField(max_length=255, null=True, blank=True)),
                ('number', models.CharField(max_length=255, null=True, blank=True)),
                ('pages', models.CharField(max_length=255, null=True, blank=True)),
                ('url', models.CharField(max_length=255, null=True, blank=True)),
                ('date', models.CharField(max_length=255, null=True, blank=True)),
                ('extra', models.CharField(max_length=255, null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletinsection', models.ForeignKey(to='cavedb.BulletinSection')),
            ],
            options={
                'ordering': ('book', 'volume', 'number', 'pages'),
                'verbose_name': 'reference',
            },
        ),
        migrations.CreateModel(
            name='CaveUserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('can_download_docs', models.BooleanField(default=True)),
                ('can_download_gis_maps', models.BooleanField(default=True)),
                ('can_generate_docs', models.BooleanField(default=False)),
                ('bulletins', models.ManyToManyField(help_text=b'Select the bulletins the user is allowed to edit. ', to='cavedb.Bulletin')),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('county_name', models.CharField(unique=True, max_length=80)),
                ('survey_short_name', models.CharField(max_length=80, unique=True, null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
            ],
            options={
                'ordering': ['county_name'],
                'verbose_name_plural': 'counties',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=80, verbose_name=b'Feature Name', db_index=True)),
                ('alternate_names', models.CharField(db_index=True, max_length=255, null=True, blank=True)),
                ('additional_index_names', models.CharField(max_length=255, null=True, blank=True)),
                ('survey_id', models.CharField(db_index=True, max_length=9, null=True, verbose_name=b'Survey ID', blank=True)),
                ('feature_type', models.CharField(default=b'cave', max_length=64, verbose_name=b'Feature Type', db_index=True, choices=[(b'Cave', b'Cave'), (b'Sandstone', b'Sandstone'), (b'FRO', b'FRO'), (b'Spring', b'Spring'), (b'Sinkhole', b'Sinkhole'), (b'Insurgence', b'Insurgence'), (b'Dig', b'Dig'), (b'Cenote', b'Cenote'), (b'Estavelle', b'Estavelle')])),
                ('is_significant', models.BooleanField(default=False, verbose_name=b'Significant?')),
                ('cave_sign_installed', models.BooleanField(default=False, verbose_name=b'Sign installed?')),
                ('length_ft', models.IntegerField(null=True, verbose_name=b'Length (ft)', blank=True)),
                ('depth_ft', models.IntegerField(null=True, verbose_name=b'Depth (ft)', blank=True)),
                ('length_based_on', models.CharField(blank=True, max_length=64, null=True, verbose_name=b'Length/Depth based on', choices=[(b'estimate', b'Estimate'), (b'survey', b'Survey')])),
                ('source', models.CharField(max_length=80, null=True, blank=True)),
                ('description', models.TextField(null=True, blank=True)),
                ('history', models.TextField(null=True, blank=True)),
                ('internal_history', models.TextField(null=True, verbose_name=b'Additional History (not public)', blank=True)),
                ('biology', models.TextField(null=True, blank=True)),
                ('geology_hydrology', models.TextField(null=True, verbose_name=b'Geology / Hydrology', blank=True)),
                ('hazards', models.TextField(null=True, blank=True)),
                ('todo_enum', models.CharField(choices=[(b'minor_field_work', b'Minor Field Work'), (b'major_field_work', b'Major Field Work'), (b'minor_computer_work', b'Minor Computer Work'), (b'major_computer_work', b'Major Computer Work')], max_length=64, blank=True, null=True, verbose_name=b'TODO Category', db_index=True)),
                ('todo_descr', models.CharField(max_length=255, null=True, verbose_name=b'TODO Description', blank=True)),
                ('owner_name', models.CharField(max_length=80, null=True, blank=True)),
                ('owner_address', models.CharField(max_length=80, null=True, blank=True)),
                ('owner_phone', models.CharField(max_length=30, null=True, blank=True)),
                ('access_enum', models.CharField(choices=[(b'open', b'open'), (b'limited', b'limited'), (b'closed', b'closed'), (b'physically closed', b'physically_closed'), (b'quarried away', b'quarried_away')], max_length=64, blank=True, null=True, verbose_name=b'Access', db_index=True)),
                ('access_descr', models.CharField(max_length=255, null=True, verbose_name=b'Access Description', blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('bulletin_region', cavedb.models.RegionChoice(to='cavedb.BulletinRegion')),
                ('survey_county', models.ForeignKey(to='cavedb.County')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FeatureAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('attachment', models.FileField(upload_to=cavedb.models.CavedbFeatureAttachmentUploadTo)),
                ('attachment_type', models.CharField(max_length=64, choices=[(b'document', b'Document'), (b'video', b'Video'), (b'survey_data', b'Survey Project Files'), (b'other', b'Other')])),
                ('user_visible_file_suffix', models.CharField(max_length=255, null=True, blank=True)),
                ('author', models.CharField(max_length=64, null=True, blank=True)),
                ('description', models.CharField(max_length=255)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
            ],
            options={
                'ordering': ('feature', 'description'),
                'verbose_name': 'attachment',
            },
        ),
        migrations.CreateModel(
            name='FeatureEntrance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('entrance_name', models.CharField(db_index=True, max_length=64, null=True, blank=True)),
                ('coord_acquision', models.CharField(blank=True, max_length=64, null=True, verbose_name=b'Coord Acquired By', choices=[(b'GPS', b'GPS Reading'), (b"7.5' Topo Map", b'7.5 Topo Map'), (b'Other Topo Map', b'Other Topo Map'), (b'Estimate', b'Estimate'), (b'Filled In', b'Filled In'), (b'Google Earth', b'Google Earth'), (b'Unknown', b'Unknown')])),
                ('datum', models.CharField(max_length=64, choices=[(b'NAD27', b'NAD27'), (b'NAD83', b'NAD83'), (b'WGS84', b'WGS84')])),
                ('elevation_ft', models.IntegerField(null=True, verbose_name=b'Elevation (ft)', blank=True)),
                ('utmeast', models.IntegerField(help_text=b'Note: You only have to enter a UTM or lat/lon coordinate. The system will automatically convert the coordinate for you. Please refrain from doing any kind of transformation of the coordinate that you have so that the original coordinate is not lost.', null=True, verbose_name=b'UTM Easting', blank=True)),
                ('utmnorth', models.IntegerField(null=True, verbose_name=b'UTM Northing', blank=True)),
                ('latitude', cavedb.models.LatLonField(help_text=b'You can specify the latitude and longitude in one of the following formats: dd mm ss[.frac secs], dd mm.frac mins or dd.frac degrees. The coordinate will be automatically converted to the format dd.frac degrees.', null=True, max_digits=13, decimal_places=9, blank=True)),
                ('longitude', cavedb.models.LatLonField(help_text=b'Make sure that you remember to put a negative sign at the beginning if the cave is in the western hemisphere.', null=True, max_digits=13, decimal_places=9, blank=True)),
                ('access_enum', models.CharField(choices=[(b'open', b'open'), (b'limited', b'limited'), (b'closed', b'closed'), (b'physically closed', b'physically_closed'), (b'quarried away', b'quarried_away')], max_length=64, blank=True, null=True, verbose_name=b'Access', db_index=True)),
                ('publish_location', models.BooleanField(default=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('county', models.ForeignKey(to='cavedb.County')),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
            ],
            options={
                'ordering': ('feature', 'entrance_name'),
                'verbose_name': 'entrance',
            },
        ),
        migrations.CreateModel(
            name='FeatureGisLineplot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('attach_zip', models.FileField(upload_to=cavedb.models.CavedbFeatureGislineplotUploadTo, verbose_name=b'Lineplot ZIP File')),
                ('shp_filename', models.CharField(max_length=80, verbose_name=b'SHP File Name')),
                ('description', models.CharField(max_length=255, null=True, blank=True)),
                ('datum', models.CharField(max_length=64, verbose_name=b'Datum', choices=[(b'NAD27', b'NAD27'), (b'NAD83', b'NAD83'), (b'WGS84', b'WGS84')])),
                ('coord_sys', models.CharField(max_length=64, verbose_name=b'Coordinate System', choices=[(b'LATLON', b'Latitude/Longitude'), (b'UTM', b'UTM')])),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
            ],
            options={
                'ordering': ('feature', 'description'),
                'verbose_name': 'GIS lineplot',
            },
        ),
        migrations.CreateModel(
            name='FeaturePhoto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('filename', models.FileField(upload_to=cavedb.models.CavedbFeaturePhotoUploadTo, verbose_name=b'Primary Photo (color if you have it)')),
                ('secondary_filename', models.FileField(upload_to=cavedb.models.CavedbFeaturePhotoUploadTo, null=True, verbose_name=b'Optional Secondary Photo (b/w)', blank=True)),
                ('type', models.CharField(max_length=64, choices=[(b'map', b'Map'), (b'entrance_picture', b'Entrance Photo'), (b'in_cave_picture', b'In-Cave Photo'), (b'surface_picture', b'Surface Photo'), (b'drawing', b'Drawing'), (b'other', b'Other')])),
                ('caption', models.CharField(max_length=255, null=True, blank=True)),
                ('people_shown', models.CharField(max_length=255, null=True, blank=True)),
                ('author', models.CharField(max_length=64, null=True, blank=True)),
                ('indexed_terms', models.TextField(null=True, blank=True)),
                ('show_in_pdf', models.BooleanField(default=True, verbose_name=b'Show in PDF')),
                ('include_on_dvd', models.BooleanField(default=True, verbose_name=b'Include on DVD')),
                ('show_at_end', models.BooleanField(default=False, verbose_name=b'Show at End')),
                ('rotate_degrees', models.IntegerField(default=0, verbose_name=b'Rotate X degrees in PDF')),
                ('scale', models.CharField(default=b'column', max_length=64, verbose_name=b'Size in PDF', choices=[(b'column', b'Column'), (b'halfpage', b'1/2 Page'), (b'fullpage', b'Full Page')])),
                ('sort_order', models.IntegerField(default=1)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
            ],
            options={
                'ordering': ('sort_order', 'type', 'caption'),
                'verbose_name': 'map / photo',
                'verbose_name_plural': 'maps / photos',
            },
        ),
        migrations.CreateModel(
            name='FeatureReference',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('author', models.CharField(max_length=255, null=True, blank=True)),
                ('title', models.CharField(max_length=255, null=True, blank=True)),
                ('book', models.CharField(max_length=255, null=True, blank=True)),
                ('volume', models.CharField(max_length=255, null=True, blank=True)),
                ('number', models.CharField(max_length=255, null=True, blank=True)),
                ('pages', models.CharField(max_length=255, null=True, blank=True)),
                ('url', models.CharField(max_length=255, null=True, blank=True)),
                ('date', models.CharField(max_length=255, null=True, blank=True)),
                ('extra', models.CharField(max_length=255, null=True, blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
            ],
            options={
                'ordering': ('book', 'volume', 'number', 'pages'),
                'verbose_name': 'reference',
            },
        ),
        migrations.CreateModel(
            name='FeatureReferencedMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('feature', models.ForeignKey(to='cavedb.Feature')),
                ('map', models.ForeignKey(to='cavedb.FeaturePhoto')),
            ],
            options={
                'ordering': ('feature', 'map'),
                'verbose_name': 'referenced map',
            },
        ),
        migrations.CreateModel(
            name='GisAerialMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=255, null=True, blank=True)),
                ('website_url', models.CharField(max_length=255, null=True, blank=True)),
                ('license_url', models.CharField(max_length=255, null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'GIS Aerial Map',
            },
        ),
        migrations.CreateModel(
            name='GisLayer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=80)),
                ('table_name', models.CharField(max_length=80, null=True, blank=True)),
                ('filename', models.CharField(max_length=255, null=True, blank=True)),
                ('display', models.BooleanField(default=True)),
                ('max_scale', models.DecimalField(null=True, max_digits=11, decimal_places=2, blank=True)),
                ('type', models.CharField(max_length=64, verbose_name=b'Type', choices=[(b'LINE', b'Line'), (b'POLYGON', b'Polygon'), (b'POINT', b'Point'), (b'RASTER', b'Raster')])),
                ('color', models.CharField(max_length=80, null=True, blank=True)),
                ('label_item', models.CharField(max_length=80, null=True, blank=True)),
                ('font_color', models.CharField(max_length=80, null=True, blank=True)),
                ('font_size', models.IntegerField(null=True, blank=True)),
                ('sort_order', models.IntegerField()),
                ('line_type', models.CharField(blank=True, max_length=64, null=True, choices=[(b'Solid', b'Solid'), (b'Dashed', b'Dashed')])),
                ('symbol', models.CharField(max_length=80, null=True, blank=True)),
                ('symbol_size', models.IntegerField(null=True, blank=True)),
                ('source', models.CharField(max_length=80)),
                ('notes', models.TextField(null=True, blank=True)),
                ('aerial_maps', models.ManyToManyField(to='cavedb.GisAerialMap')),
            ],
            options={
                'ordering': ('sort_order',),
                'verbose_name': 'GIS Layer',
            },
        ),
        migrations.CreateModel(
            name='TopoQuad',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quad_name', models.CharField(unique=True, max_length=80)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
                ('county', models.ManyToManyField(to='cavedb.County')),
            ],
            options={
                'ordering': ['quad_name'],
            },
        ),
        migrations.CreateModel(
            name='UtmZone',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('utm_zone', models.IntegerField(verbose_name=b'UTM Zone')),
                ('utm_north', models.BooleanField(default=True, verbose_name=b'North')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Creation Date', null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name=b'Modification Date', null=True)),
            ],
            options={
                'ordering': ('utm_zone',),
                'verbose_name': 'UTM zone',
            },
        ),
        migrations.AddField(
            model_name='featureentrance',
            name='quad',
            field=models.ForeignKey(blank=True, to='cavedb.TopoQuad', null=True),
        ),
        migrations.AddField(
            model_name='featureentrance',
            name='utmzone',
            field=models.ForeignKey(verbose_name=b'UTM zone', to='cavedb.UtmZone'),
        ),
        migrations.AddField(
            model_name='bulletin',
            name='bw_aerial_map',
            field=models.ForeignKey(related_name='bw_aerial_map_id', verbose_name=b'Aerial Map for the B&W Bulletin', blank=True, to='cavedb.GisAerialMap', null=True),
        ),
        migrations.AddField(
            model_name='bulletin',
            name='color_aerial_map',
            field=models.ForeignKey(related_name='color_aerial_map_id', verbose_name=b'Aerial Map for the Color Bulletin', blank=True, to='cavedb.GisAerialMap', null=True),
        ),
    ]
